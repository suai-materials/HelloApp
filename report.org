* Лабораторная работа № 1

Создание консольного приложения в IDE Visual Studio. Работа с системой контроля версий

Цель: изучение IDE Visual Studio, создание простейшего приложения на Python, подключение Git.


​1. Добавил в HelloApp.py

   #+begin_src python
print("Hello Python from Visual Studio!")
   #+end_src

​2. Создал Git-репозиторий с помощью PyCharm

#+CAPTION: Создание Git-репозитория
[[file:images/20230222-094130_screenshot.png]]


#+CAPTION: Создание Git-репозитория
[[file:images/20230222-094147_screenshot.png]]

​3. Добавил файл в Stage

#+CAPTION: Добавление файла в Stage в Pycharm 
[[file:images/20230222-094325_screenshot.png]]

​4. Создал commit изменений

#+CAPTION: Демонстрация commit
[[file:images/20230222-094612_screenshot.png]]

​4. Добавление кода из прошлых заданий по Python

   #+begin_src python
print("Hello Python from Visual Studio!")
s: str = "*" * 30
print(s)
print("New project")
print("")

import cProfile
import re

r = re.compile("\\d\\S")
cProfile.run("""[r.findall("sdfdsfD, 1d, 7f") for i in range(1000000)]""")

   #+end_src

#+CAPTION: Создание нового commit
#[[file:images/20230222-103001_screenshot.png]]


​5. Git-log

#+CAPTION: Демонстрация git-log
[[file:images/20230222-103105_screenshot.png]]



​6. Push репозитория на GitHub

#+CAPTION: Создание репозитория на GitHub
[[file:images/20230222-094932_screenshot.png]]

#+CAPTION: Получил ссылку
[[file:images/20230222-095050_screenshot.png]]

#+CAPTION: Добавление remote репозитория
[[file:images/20230222-095124_screenshot.png]]

#+CAPTION: После добавления
[[file:images/20230222-095207_screenshot.png]]


#+CAPTION: Процесс push
[[file:images/20230222-095249_screenshot.png]]


#+CAPTION: Изменения репозитория
[[file:images/20230222-104021_screenshot.png]]




​7. Так-как я использую Pycharm, то он не генерирует .gitignore

​8. Создать новый проект в VS. Написать код генерирующий список элементов случайным образом из диапазона от 5 до № по журналу * 100 (число элементов № по журналу + 10). Выполнить коммит (содержание должно соответствовать задаче). Оформить код в виде функции, вызвав её с указанным числом элементов. Добавить коммит. Запушить на GitHub. На веб-сервисе создать файл README с описанием задачи, перечнем, включающим среду и язык реализации, используемые библиотеки, фамилию разработчика.


Код генератора списка:
#+begin_src python
from random import randrange
from typing import List


def my_random_list(n: int) -> List[int]:
    """Генерация списка со случайными числами"""
    return [randrange(5, 12 * 100) for i in range(n)]


if __name__ == '__main__':
    print(my_random_list(22))

#+end_src


#+CAPTION: Репозиторий на GitHub после первого commit'a
[[file:images/20230222-101257_screenshot.png]]


#+CAPTION: Создание README файла
[[file:images/20230222-101436_screenshot.png]]

#+CAPTION: Итоговый репозиторий на GitHub
[[file:images/20230222-101505_screenshot.png]]


Контрольные вопросы:

1. Что такое система контроля версий Git? Требуется ли её установка при работе с VS? 

   Git - это система контроля версий,
   которая позволяет отслеживать изменения
   в исходном коде проекта и управлять ими.
   Git позволяет хранить историю изменений,
   возвращаться к предыдущим версиям кода, вносить изменения параллельно,
   объединять изменения и многое другое.

   Для Visual Studio требуется предустановленный Git.

2. Какие основные возможности предоставляет Git в среде VS? 

   В среде Visual Studio Git предоставляет возможности по созданию, клонированию, управлению и синхронизации репозиториев Git. Основные возможности Git в среде Visual Studio:
   - Создание новых репозиториев Git

   - Клонирование существующих репозиториев Git

   - Управление изменениями исходного кода в репозитории Git

   - Отслеживание изменений, внесенных другими участниками проекта

   - Работа с ветками и слияние изменений

   - Отправка изменений в удаленный репозиторий и получение изменений из удаленного репозитория.

3. Что из настроек Git является обязательным при работе с удалённым репозиторием? 

   - Указание удаленного репозитория, куда будут отправляться изменения.

   - Настройка локальной ветки для отслеживания удаленной ветки.

   - Аутентификация на удаленном репозитории.

4. Какую систему защиты и сертификации данных использует Git по умолчанию?

   Git может использовать три различных протокола для передачи данных:
   Local, HTTP, Secure Shell (SSH).

   При хранении файлов на компьютере используется Local.

   Для передачи используют: HTTP или Smart HTTP(более умная верисия HTTP).

   SSH используется, если он используется сервером.

5. Можно ли вернуться к прежней версии файла с помощью Git? Каким образом? 

   Да, можно вернуться к прежней версии файла с помощью Git.
   Для этого необходимо использовать команду "git checkout"
   с указанием хэша коммита или имени ветки, на которую нужно переключиться.

6. Что нужно сделать, если требуется изменить сообщение последнего коммита?

   Если требуется изменить сообщение последнего коммита,
   можно использовать команду "git commit --amend".
   Она позволяет изменить сообщение последнего коммита
   или добавить изменения в него.

7. Как называется главная ветвь разработки? Можно ли её переименовать?

   Главная ветвь разработки называется "master". В Git версии 2.28.0 и выше главная ветвь была переименована в "main".
   Да, её можно переименовать с помощью команды "git branch -m <old_branch_name> <new_branch_name>".

8. Зачем нужен файл .gitignore и каким образом он создаётся?

   Файл .gitignore предназначен для указания Git файлов и папок,
   которые не должны быть добавлены в репозиторий.
   Он позволяет исключить файлы и папки, которые не нужны в репозитории,
   такие как временные файлы, конфигурационные файлы,
   файлы логов, файлы бинарных данных и многое другое.

   Файл .gitignore создается в корневой папке проекта.
   Он может содержать шаблоны для исключения файлов и папок.
   Шаблоны могут включать имя файла или папки, а также использовать
   символы подстановки, такие как *, ?, [ ], { }, и многое другое.
   Файл .gitignore можно создать вручную или с помощью специальных инструментов,
   таких как Visual Studio или Git Extensions.

